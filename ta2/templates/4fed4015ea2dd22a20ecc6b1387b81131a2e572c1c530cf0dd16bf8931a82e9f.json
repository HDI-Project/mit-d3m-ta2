{"id": "4fed4015ea2dd22a20ecc6b1387b81131a2e572c1c530cf0dd16bf8931a82e9f", "schema": "https://metadata.datadrivendiscovery.org/schemas/v0/pipeline.json", "created": "2020-01-19T20:49:09.428625Z", "inputs": [{"name": "inputs"}], "outputs": [{"data": "steps.12.produce", "name": "output"}], "steps": [{"type": "PRIMITIVE", "primitive": {"id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65", "version": "0.3.0", "python_path": "d3m.primitives.data_transformation.dataset_to_dataframe.Common", "name": "Extract a DataFrame from a Dataset", "digest": "990784f527a78250fcab70af9714314490e91f9a5916eb38834d74e8c38f435b"}, "arguments": {"inputs": {"type": "CONTAINER", "data": "inputs.0"}}, "outputs": [{"id": "produce"}]}, {"type": "PRIMITIVE", "primitive": {"id": "e193afa1-b45e-4d29-918f-5bb1fa3b88a7", "version": "0.2.0", "python_path": "d3m.primitives.schema_discovery.profiler.Common", "name": "Determine missing semantic types for columns automatically", "digest": "812f8751faff8fa1fd614e29448206db50074486bae0fc127badaf8b04e127de"}, "arguments": {"inputs": {"type": "CONTAINER", "data": "steps.0.produce"}}, "outputs": [{"id": "produce"}]}, {"type": "PRIMITIVE", "primitive": {"id": "d510cb7a-1782-4f51-b44c-58f0236e47c7", "version": "0.6.0", "python_path": "d3m.primitives.data_transformation.column_parser.Common", "name": "Parses strings into their types", "digest": "96e020725140c0a67033e5e340c555514b0a5432179254c38813a4e85687528d"}, "arguments": {"inputs": {"type": "CONTAINER", "data": "steps.1.produce"}}, "outputs": [{"id": "produce"}]}, {"type": "PRIMITIVE", "primitive": {"id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1", "version": "0.4.0", "python_path": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.Common", "name": "Extracts columns by semantic type", "digest": "591d3ee40b266bda04fa345aeea7b56d81db182fb144cde164e02be019a05f10"}, "arguments": {"inputs": {"type": "CONTAINER", "data": "steps.2.produce"}}, "outputs": [{"id": "produce"}], "hyperparams": {"semantic_types": {"type": "VALUE", "data": ["https://metadata.datadrivendiscovery.org/types/Attribute"]}}}, {"type": "PRIMITIVE", "primitive": {"id": "d38e2e28-9b18-4ce4-b07c-9d809cd8b915", "version": "0.2.1", "python_path": "d3m.primitives.data_transformation.encoder.DistilBinaryEncoder", "name": "Binary encoder", "digest": "71bb32d04e013349291ff222d2ea82bfb4a4849d720c4dcbc761126b5d2a2015"}, "arguments": {"inputs": {"type": "CONTAINER", "data": "steps.3.produce"}}, "outputs": [{"id": "produce"}], "hyperparams": {"min_binary": {"type": "VALUE", "data": 2}}}, {"type": "PRIMITIVE", "primitive": {"id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1", "version": "0.4.0", "python_path": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.Common", "name": "Extracts columns by semantic type", "digest": "591d3ee40b266bda04fa345aeea7b56d81db182fb144cde164e02be019a05f10"}, "arguments": {"inputs": {"type": "CONTAINER", "data": "steps.2.produce"}}, "outputs": [{"id": "produce"}], "hyperparams": {"semantic_types": {"type": "VALUE", "data": ["https://metadata.datadrivendiscovery.org/types/TrueTarget"]}}}, {"type": "PRIMITIVE", "primitive": {"id": "34f71b2e-17bb-488d-a2ba-b60b8c305539", "version": "0.1.0", "python_path": "d3m.primitives.data_transformation.dataframe_to_ndarray.Common", "name": "DataFrame to ndarray converter", "digest": "2c15245b5a254f027f657edc6b560a108b670e45be2b18f5232481768b966bd5"}, "arguments": {"inputs": {"type": "CONTAINER", "data": "steps.5.produce"}}, "outputs": [{"id": "produce"}]}, {"type": "PRIMITIVE", "primitive": {"id": "34f71b2e-17bb-488d-a2ba-b60b8c305539", "version": "0.1.0", "python_path": "d3m.primitives.data_transformation.dataframe_to_ndarray.Common", "name": "DataFrame to ndarray converter", "digest": "2c15245b5a254f027f657edc6b560a108b670e45be2b18f5232481768b966bd5"}, "arguments": {"inputs": {"type": "CONTAINER", "data": "steps.4.produce"}}, "outputs": [{"id": "produce"}]}, {"type": "PRIMITIVE", "primitive": {"id": "ea3b78a6-dc8c-4772-a329-b653583817b4", "version": "3.0.1", "python_path": "d3m.primitives.feature_extraction.sparse_pca.SparsePCA", "name": "Sparse Principal Component Analysis", "digest": "38f0c1eda79d6a1ef931f92f41e289e7bb1d44c005ecce13a8e50cc401222e07"}, "arguments": {"inputs": {"type": "CONTAINER", "data": "steps.7.produce"}}, "outputs": [{"id": "produce"}], "hyperparams": {"n_components": {"type": "VALUE", "data": 9}, "beta": {"type": "VALUE", "data": 1e-09}, "alpha": {"type": "VALUE", "data": 0.0001}, "degree": {"type": "VALUE", "data": 2}}}, {"type": "PRIMITIVE", "primitive": {"id": "f5241b2e-64f7-44ad-9675-df3d08066437", "version": "0.1.0", "python_path": "d3m.primitives.data_transformation.ndarray_to_dataframe.Common", "name": "ndarray to Dataframe converter", "digest": "2d75f857cc5c3d2a614bba9219560717a3f72b607f51d18d066a7a9a202a1b69"}, "arguments": {"inputs": {"type": "CONTAINER", "data": "steps.8.produce"}}, "outputs": [{"id": "produce"}]}, {"type": "PRIMITIVE", "primitive": {"id": "aff6a77a-faa0-41c5-9595-de2e7f7c4760", "version": "0.2.0", "python_path": "d3m.primitives.data_transformation.horizontal_concat.DataFrameCommon", "name": "Concatenate two dataframes", "digest": "253a6d1931ca5e4de786bf05bc83cbb4916df3f2b1d67565fe4ef7501f71da28"}, "arguments": {"left": {"type": "CONTAINER", "data": "steps.4.produce"}, "right": {"type": "CONTAINER", "data": "steps.9.produce"}}, "outputs": [{"id": "produce"}]}, {"type": "PRIMITIVE", "primitive": {"id": "2a031907-6b2c-3390-b365-921f89c8816a", "version": "2019.11.13", "python_path": "d3m.primitives.regression.gradient_boosting.SKlearn", "name": "sklearn.ensemble.gradient_boosting.GradientBoostingRegressor", "digest": "0ac51dfa8e68ff8e12838ba198026bd144c78d183fddf901d0fd257ff540958d"}, "arguments": {"inputs": {"type": "CONTAINER", "data": "steps.10.produce"}, "outputs": {"type": "CONTAINER", "data": "steps.5.produce"}}, "outputs": [{"id": "produce"}], "hyperparams": {"n_estimators": {"type": "VALUE", "data": 63000}, "learning_rate": {"type": "VALUE", "data": 0.0001}, "max_depth": {"type": "VALUE", "data": 3}}}, {"type": "PRIMITIVE", "primitive": {"id": "8d38b340-f83f-4877-baaa-162f8e551736", "version": "0.3.0", "python_path": "d3m.primitives.data_transformation.construct_predictions.Common", "name": "Construct pipeline predictions output", "digest": "d597b7d1f1a28e331c710a0065c046d667d0e3b22e2b96c0be28d64d105e9d17"}, "arguments": {"inputs": {"type": "CONTAINER", "data": "steps.11.produce"}, "reference": {"type": "CONTAINER", "data": "steps.1.produce"}}, "outputs": [{"id": "produce"}]}], "digest": "57c3589dc574e5b492bfbe2c7318e33cef1dd6f5a426d08fe5f00165ec6aec69"}